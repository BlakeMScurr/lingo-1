// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package codelingo;

import "github.com/codelingo/clql/dotlingo/dotlingo.proto";
import "github.com/codelingo/clql/inner/inner.proto";

// The query service definition.
service CodeLingo {
    // Initialise session
    rpc Session (SessionRequest) returns (SessionReply) {}

    // Reviews files
    rpc Review (stream ReviewRequest) returns (stream Issue) {}

    // Queries source code
    rpc Query (stream QueryRequest) returns (stream QueryReply) {}

    // Lists available lexicons
    rpc ListLexicons (ListLexiconsRequest) returns (ListLexiconsReply) {}

    rpc ListFacts (ListFactsRequest) returns (FactList) {}

    rpc PathsFromOffset (PathsFromOffsetRequest) returns (PathsFromOffsetReply) {}

    rpc DescribeFact (DescribeFactRequest) returns (DescribeFactReply) {}

    // Return the latest client version for this platform
    rpc LatestClientVersion (LatestClientVersionRequest) returns (LatestClientVersionReply) {}
}

message DescribeFactRequest {
    string owner = 1;
    string name = 2;
    string version = 3;
    string fact = 4;
}

message DescribeFactReply {
    string description = 1;
    string examples = 2;
    repeated Property properties = 3;
}

message Property {
    string name = 1;
    string description = 2;
}

message PathsFromOffsetRequest {
    string lang = 1;
    string dir = 2;
    string filename = 3;
    string src = 4;
    int64 start = 5;
    int64 end = 6;

}

message PathsFromOffsetReply {
    repeated Path paths = 1;
}

message Path {
    repeated string nodes = 1;
}

message ListFactsRequest {
    string owner = 1;
    string name = 2;
    string version = 3;
}

message FactList {
    map<string, Children> facts = 1;
}

message Children {
    repeated string child = 1;
}

message ListLexiconsRequest {}

message ListLexiconsReply {
    repeated string lexicons = 1;
}

message SessionRequest {}

message SessionReply {
    string key = 1;
}

// The request message containing the CLQL source code.
message QueryRequest {
    inner.Fact fact = 1;
    repeated dotlingo.Lexicon lexicons = 2;
    map<string, MetaDatum> metadata = 3;
}

// Possible values correspond with in platform/controller/graphdb/query/result
message MetaDatum {
    oneof datum {
        string string = 1;
        int64 int = 2;
        bool bool = 3;
    }
}

// The query response.
message QueryReply {
    string id = 1;
    repeated string kind = 2;
    message DataList {
        repeated string data = 1;
    }
    map<string, DataList> data = 3;
    map<string, DataList> metadata = 4;
    string error = 5;
}

// The request message containing the files or directories to review.
message ReviewRequest {
    string host = 1;
    string hostname = 2;
    string owner = 3;
    string repo= 4;
    string sha = 5;
    repeated string Patches = 6;
    bool isPullRequest = 7;
    int64 pullRequestID = 8;
    string vcs = 9;
    string dotlingo = 10;
    string dir = 11;
}

// Issue returned from a review.
message Issue {
    // The name of the issue.
    string name         =1; // Name is the the name of the checker that added the issue
    IssueRange position =2;    // position in source file
    string comment      =3;        // The rendered comment for this issue.
    string ctxBefore    =4;      // source lines before the problem line(s)
    string lineText     =5;    // the source line(s)
    string ctxAfter     =6;   // source lines after the problem line(s)
    map<string, string> metrics = 7; // metrics set when the issue was raised.
    repeated string tags =8; // tags added when the issue was raised.
    string link         =9; // (optional) the link to the style guide for the problem
    bool newCode        =10; // When checking a diff, this indicates if the issue was found in existing or new code.
    string patch        =11; // A diff patch resolving the issue.
    string err          =12; // Any err encounted while building the issue.
    bool discard        =13; // TODO(waigani) discard is only used by client and shouldn't be on wire format.
    string discardReason=14; // TODO(waigani) also should not be on wire format.
}

message IssueRange {
    Position start =1;
    Position end =2;
}

message Position  {
    string filename =1; // filename, if any
    int64 Offset     =2;  // offset, starting at 0
    int64 Line       =3;  // line number, starting at 1
    int64 Column     =4;  // column number, starting at 1 (byte count)
}

message LatestClientVersionRequest {}

message LatestClientVersionReply {
    string version  =1;  // Version string, ie. 1.0.4
}
