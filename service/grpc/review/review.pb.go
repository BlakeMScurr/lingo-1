// Code generated by protoc-gen-go.
// source: review.proto
// DO NOT EDIT!

/*
Package review is a generated protocol buffer package.

It is generated from these files:
	review.proto

It has these top-level messages:
	ReviewRequest
	Issue
	IssueRange
	Position
*/
package review

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// The request message containing the files or directories to review.
type ReviewRequest struct {
	FilesAndDirs []string `protobuf:"bytes,1,rep,name=filesAndDirs" json:"filesAndDirs,omitempty"`
}

func (m *ReviewRequest) Reset()         { *m = ReviewRequest{} }
func (m *ReviewRequest) String() string { return proto.CompactTextString(m) }
func (*ReviewRequest) ProtoMessage()    {}

// Issue returned from a review.
type Issue struct {
	// The name of the issue.
	Name      string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Position  *IssueRange       `protobuf:"bytes,2,opt,name=position" json:"position,omitempty"`
	Comment   string            `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
	CtxBefore string            `protobuf:"bytes,4,opt,name=ctxBefore" json:"ctxBefore,omitempty"`
	LineText  string            `protobuf:"bytes,5,opt,name=lineText" json:"lineText,omitempty"`
	CtxAfter  string            `protobuf:"bytes,6,opt,name=ctxAfter" json:"ctxAfter,omitempty"`
	Metrics   map[string]string `protobuf:"bytes,7,rep,name=metrics" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Tags      []string          `protobuf:"bytes,8,rep,name=tags" json:"tags,omitempty"`
	Link      string            `protobuf:"bytes,9,opt,name=link" json:"link,omitempty"`
	NewCode   bool              `protobuf:"varint,10,opt,name=newCode" json:"newCode,omitempty"`
	Patch     string            `protobuf:"bytes,11,opt,name=patch" json:"patch,omitempty"`
	Err       string            `protobuf:"bytes,12,opt,name=err" json:"err,omitempty"`
}

func (m *Issue) Reset()         { *m = Issue{} }
func (m *Issue) String() string { return proto.CompactTextString(m) }
func (*Issue) ProtoMessage()    {}

func (m *Issue) GetPosition() *IssueRange {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *Issue) GetMetrics() map[string]string {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type IssueRange struct {
	Start *Position `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	End   *Position `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
}

func (m *IssueRange) Reset()         { *m = IssueRange{} }
func (m *IssueRange) String() string { return proto.CompactTextString(m) }
func (*IssueRange) ProtoMessage()    {}

func (m *IssueRange) GetStart() *Position {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *IssueRange) GetEnd() *Position {
	if m != nil {
		return m.End
	}
	return nil
}

type Position struct {
	Filename string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Offset   int64  `protobuf:"varint,2,opt,name=Offset" json:"Offset,omitempty"`
	Line     int64  `protobuf:"varint,3,opt,name=Line" json:"Line,omitempty"`
	Column   int64  `protobuf:"varint,4,opt,name=Column" json:"Column,omitempty"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}

func init() {
	proto.RegisterType((*ReviewRequest)(nil), "review.ReviewRequest")
	proto.RegisterType((*Issue)(nil), "review.Issue")
	proto.RegisterType((*IssueRange)(nil), "review.IssueRange")
	proto.RegisterType((*Position)(nil), "review.Position")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Review service

type ReviewClient interface {
	// Sends a greeting
	Review(ctx context.Context, in *ReviewRequest, opts ...grpc.CallOption) (Review_ReviewClient, error)
}

type reviewClient struct {
	cc *grpc.ClientConn
}

func NewReviewClient(cc *grpc.ClientConn) ReviewClient {
	return &reviewClient{cc}
}

func (c *reviewClient) Review(ctx context.Context, in *ReviewRequest, opts ...grpc.CallOption) (Review_ReviewClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Review_serviceDesc.Streams[0], c.cc, "/review.Review/Review", opts...)
	if err != nil {
		return nil, err
	}
	x := &reviewReviewClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Review_ReviewClient interface {
	Recv() (*Issue, error)
	grpc.ClientStream
}

type reviewReviewClient struct {
	grpc.ClientStream
}

func (x *reviewReviewClient) Recv() (*Issue, error) {
	m := new(Issue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Review service

type ReviewServer interface {
	// Sends a greeting
	Review(*ReviewRequest, Review_ReviewServer) error
}

func RegisterReviewServer(s *grpc.Server, srv ReviewServer) {
	s.RegisterService(&_Review_serviceDesc, srv)
}

func _Review_Review_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReviewRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReviewServer).Review(m, &reviewReviewServer{stream})
}

type Review_ReviewServer interface {
	Send(*Issue) error
	grpc.ServerStream
}

type reviewReviewServer struct {
	grpc.ServerStream
}

func (x *reviewReviewServer) Send(m *Issue) error {
	return x.ServerStream.SendMsg(m)
}

var _Review_serviceDesc = grpc.ServiceDesc{
	ServiceName: "review.Review",
	HandlerType: (*ReviewServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Review",
			Handler:       _Review_Review_Handler,
			ServerStreams: true,
		},
	},
}
